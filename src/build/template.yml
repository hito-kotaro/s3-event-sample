AWSTemplateFormatVersion: 2010-09-09
Parameters:
  BucketName:
    Type: String
    Default: data-receive-test
  DestBucket:
    Type: String
    Default: data-send-test
  DestBucketPrefix:
    Type: String
    Default: data
  FunctionName:
    Type: String
    Default: data-send-function
  AccessKey:
    Type: String
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: BucketName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:Put
          Filter:
            S3Key:
              Rules:
              - Name: prefix
                Value: data/
              - Name: suffix
                Value: txt
          Function:
            Fn::GetAtt:
            - Lambda
            - Arn
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-function-execution-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/SecretsManagerReadWrite
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  TriggerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - Lambda
        - Arn
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:s3:::'
          - Ref: BucketName
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      FunctionName:
        Ref: FunctionName
      Runtime: python3.8
      Handler: index.lambda_handler
      Environment:
        Variables:
          ACCESS_KEY:
            Ref: AccessKey
          DEST_BUCKET:
            Ref: DestBucket
          DEST_PATH:
            Ref: DestBucketPrefix
      Code:
        ZipFile: "import boto3\nimport os\nimport json\nfrom botocore.exceptions import\
          \ ClientError\n\nDEST_BUCKET=os.environ['DEST_BUCKET']\nDEST_PATH=os.environ['DEST_PATH']\n\
          ACCESS_KEY=os.environ['ACCESS_KEY']\n\ndef get_secret():\n    secret_name\
          \ = \"sample\"\n    session = boto3.session.Session()\n    client = session.client(\n\
          \        service_name='secretsmanager',\n    )\n\n    try:\n        print('getSecret')\n\
          \        get_secret_value_response = client.get_secret_value(\n        \
          \    SecretId=secret_name\n        )\n        print('get success')\n\n \
          \   except ClientError as e:\n        raise e\n    secrets = get_secret_value_response['SecretString']\n\
          \    return json.loads(secrets)\n\n\ndef exec_copy(event):\n  bucket_name\
          \ = event['Records'][0]['s3']['bucket']['name']\n  from_key = event['Records'][0]['s3']['object']['key']\n\
          \  print(bucket_name)\n  print(from_key)\n  secrets = get_secret()\n  secret_key\
          \ = secrets[ACCESS_KEY]\n  print(secret_key)\n  s3_with_profile = boto3.client('s3',aws_access_key_id=ACCESS_KEY,aws_secret_access_key=secret_key)\n\
          \  s3 = boto3.client('s3')\n\n  # result = s3.copy_object(\n  #   Bucket=DEST_BUCKET,\n\
          \  #   Key=DEST_PATH,\n  #   CopySource={'Bucket': bucket_name, 'Key': from_key}\n\
          \  # )\n  # print('---s3---')\n  # print(result)\n\n  result2 = s3_with_profile.copy_object(\n\
          \    Bucket=DEST_BUCKET,\n    Key=DEST_PATH,\n    CopySource={'Bucket':\
          \ bucket_name, 'Key': from_key}\n  )\n  print('---s3_with_profile---')\n\
          \  print(result2)\n\ndef lambda_handler(event, context):\n  print(DEST_BUCKET)\n\
          \  print(DEST_PATH)\n  print(ACCESS_KEY)\n  exec_copy(event)\n  secret =\
          \ get_secret()\n  print(secret)\n  return 200\n"
